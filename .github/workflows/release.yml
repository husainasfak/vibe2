name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: darwin_amd64
            suffix: ""
            ext: tar.gz
            cmd: tar -czvf

          - os: macos-latest
            target: darwin_arm64
            suffix: ""
            ext: tar.gz
            cmd: tar -czvf
            conda_subdir: osx-arm64

          - os: ubuntu-latest
            target: linux_amd64
            suffix: ""
            ext: tar.gz
            cmd: tar -czvf

          - os: ubuntu-latest
            target: linux_arm64
            suffix: ""
            ext: tar.gz
            cmd: tar -czvf
            conda_subdir: linux-arm64

          - os: windows-latest
            target: windows_amd64
            suffix: ".exe"
            ext: zip
            cmd: 7z a

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install pyinstaller build

      - name: Set cross-compilation for ARM64
        if: contains(matrix.target, 'arm64')
        shell: bash
        run: |
          echo "Setting up cross-compilation environment for ARM64"
          if [[ "${{ matrix.target }}" == *"darwin"* ]]; then
            echo "ARCHFLAGS=-arch arm64" >> $GITHUB_ENV
          fi

      - name: Build executable
        env:
          CONDA_SUBDIR: ${{ matrix.conda_subdir }}
        run: |
          pyinstaller -F -n vibe${{ matrix.suffix }} vibe.py

      - name: Debug dist directory contents (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ls -la dist/

      - name: Debug dist directory contents (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Get-ChildItem -Path dist/ -Force

      - name: Debug project root directory (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ls -la
          echo "GITHUB_REF_NAME: ${GITHUB_REF_NAME}"
          echo "Tag: ${{ github.ref_name }}"

      - name: Debug project root directory (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Get-ChildItem -Path . -Force
          Write-Host "GITHUB_REF_NAME: $env:GITHUB_REF_NAME"
          Write-Host "Tag: ${{ github.ref_name }}"

      - name: Create release directory
        run: mkdir -p release

      - name: Package artifact (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd dist
          ${{ matrix.cmd }} ../release/vibe_${{ github.ref_name }}_${{ matrix.target }}.${{ matrix.ext }} vibe${{ matrix.suffix }}

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd dist
          $tagName = "${{ github.ref_name }}"
          $targetName = "${{ matrix.target }}"
          $extension = "${{ matrix.ext }}"
          $executableName = "vibe${{ matrix.suffix }}"
          
          Write-Host "Creating zip archive with 7z"
          Write-Host "Tag: $tagName"
          Write-Host "Target: $targetName"
          Write-Host "Extension: $extension"
          Write-Host "Executable: $executableName"
          
          7z a "..\release\vibe_${tagName}_${targetName}.${extension}" "$executableName"
          
          Write-Host "Contents of release directory:"
          Get-ChildItem -Path ..\release

      - name: Generate checksum (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd release
          shasum -a 256 vibe_${{ github.ref_name }}_${{ matrix.target }}.${{ matrix.ext }} > checksums.txt

      - name: Generate checksum (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd release
          Get-ChildItem -Path . | ForEach-Object { Write-Host $_.Name }
          $zipFile = Get-ChildItem -Path . -Filter "*.zip" | Select-Object -First 1
          
          if ($zipFile) {
            Write-Host "Found zip file: $($zipFile.Name)"
            $hash = (Get-FileHash -Algorithm SHA256 $zipFile.Name).Hash.ToLower()
            "$hash  $($zipFile.Name)" | Out-File -Encoding utf8 checksums.txt
            Get-Content checksums.txt
          } else {
            Write-Host "No zip files found in release directory!"
            exit 1
          }

      - uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: release/
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug downloaded artifacts
        run: |
          find artifacts -type f | sort

      - name: Combine checksums
        run: |
          mkdir -p release
          cat artifacts/*/checksums.txt > release/checksums.txt
          cat release/checksums.txt

      - name: Copy release files
        run: |
          cp artifacts/*/vibe_*.*gz release/ || echo "No gz files found"
          cp artifacts/*/vibe_*.zip release/ || echo "No zip files found"
          ls -la release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/checksums.txt
            release/vibe_*.*gz
            release/vibe_*.zip
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}